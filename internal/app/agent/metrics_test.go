package agent

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_metrics_Poll(t *testing.T) {
	m := newMetrics()
	m.Poll()
	assert.GreaterOrEqual(t, m.gauge["Alloc"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["BuckHashSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["Frees"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["GCCPUFraction"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["GCSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapAlloc"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapIdle"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapInuse"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapObjects"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapReleased"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["HeapSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["LastGC"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["Lookups"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["MCacheInuse"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["MCacheSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["MSpanInuse"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["MSpanSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["Mallocs"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["NextGC"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["NumForcedGC"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["NumGC"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["OtherSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["PauseTotalNs"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["StackInuse"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["StackSys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["Sys"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["TotalAlloc"], gauge(0))
	assert.GreaterOrEqual(t, m.gauge["RandomValue"], gauge(0))
	assert.Equal(t, m.counter["PollCount"], counter(1))
	m.Poll()
	assert.Equal(t, m.counter["PollCount"], counter(2))
}

func Test_metrics_Read(t *testing.T) {
	m := newMetrics()
	m.Poll()
	pollCount, g, c := m.Get()
	assert.Equal(t, int(pollCount), 1)
	assert.GreaterOrEqual(t, g["Alloc"], gauge(0))
	assert.GreaterOrEqual(t, g["BuckHashSys"], gauge(0))
	assert.GreaterOrEqual(t, g["Frees"], gauge(0))
	assert.GreaterOrEqual(t, g["GCCPUFraction"], gauge(0))
	assert.GreaterOrEqual(t, g["GCSys"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapAlloc"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapIdle"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapInuse"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapObjects"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapReleased"], gauge(0))
	assert.GreaterOrEqual(t, g["HeapSys"], gauge(0))
	assert.GreaterOrEqual(t, g["LastGC"], gauge(0))
	assert.GreaterOrEqual(t, g["Lookups"], gauge(0))
	assert.GreaterOrEqual(t, g["MCacheInuse"], gauge(0))
	assert.GreaterOrEqual(t, g["MCacheSys"], gauge(0))
	assert.GreaterOrEqual(t, g["MSpanInuse"], gauge(0))
	assert.GreaterOrEqual(t, g["MSpanSys"], gauge(0))
	assert.GreaterOrEqual(t, g["Mallocs"], gauge(0))
	assert.GreaterOrEqual(t, g["NextGC"], gauge(0))
	assert.GreaterOrEqual(t, g["NumForcedGC"], gauge(0))
	assert.GreaterOrEqual(t, g["NumGC"], gauge(0))
	assert.GreaterOrEqual(t, g["OtherSys"], gauge(0))
	assert.GreaterOrEqual(t, g["PauseTotalNs"], gauge(0))
	assert.GreaterOrEqual(t, g["StackInuse"], gauge(0))
	assert.GreaterOrEqual(t, g["StackSys"], gauge(0))
	assert.GreaterOrEqual(t, g["Sys"], gauge(0))
	assert.GreaterOrEqual(t, g["TotalAlloc"], gauge(0))
	assert.GreaterOrEqual(t, g["RandomValue"], gauge(0))
	assert.Equal(t, c["PollCount"], counter(1))
}
